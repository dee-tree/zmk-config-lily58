/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define PRIOR_IDLE 150
#define PRIOR_IDLE_SHIFT 50
#define QUICK_TAP_MS 160

/ {
    combos {
        compatible = "zmk,combos";

        sticky_shift_left {
            bindings = <&sticky_shift LEFT_SHIFT>;
            key-positions = <39 40>;
            require-prior-idle-ms = <100>;
            timeout-ms = <30>;
            layers = <0 1>;
        };

        sticky_shift_right {
            bindings = <&sticky_shift LEFT_SHIFT>;
            key-positions = <46 45>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        shift_caps: shift_caps {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_CAPS";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
        };

        home_row_sticky: home_row_sticky {
            compatible = "zmk,behavior-sticky-key";
            label = "HOME_ROW_STICKY";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1500>;
            quick-release;
            ignore-modifiers;
        };

        key_mod_thumb: key_mod_thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "KEY_MOD_THUMB";
            bindings = <&sticky_ctrl>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
            quick-tap-ms = <180>;
            require-prior-idle-ms = <0>;
        };

        key_layer: key_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "KEY_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            quick-tap-ms = <160>;
            require-prior-idle-ms = <50>;
        };

        key_repeat_mod: key_repeat_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "KEY_REPEAT_MOD";
            bindings = <&kp>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            quick-tap-ms = <160>;
            require-prior-idle-ms = <50>;
        };

        sticky_shift: sticky_shift {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_SHIFT";
            bindings = <&sk>;
            #binding-cells = <1>;
            release-after-ms = <600>;
            ignore-modifiers;
            quick-release;
        };

        layer_fix: layer_fix {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_FIX";
            bindings = <&to>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        key_layer_thumb: key_layer_thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "KEY_LAYER_THUMB";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
            quick-tap-ms = <180>;
            require-prior-idle-ms = <0>;
        };

        shift_dedicated: shift_dedicated {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_DEDICATED";
            #binding-cells = <0>;
            bindings = <&sticky_shift LEFT_SHIFT>, <&caps_word>;
        };

        key_mod_shift: key_mod_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "KEY_MOD_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "hold-preferred";
            quick-tap-ms = <180>;
            require-prior-idle-ms = <70>;
        };

        sticky_ctrl: sticky_ctrl {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_CTRL";
            bindings = <&sk>;
            #binding-cells = <1>;
            release-after-ms = <300>;
            ignore-modifiers;
            quick-release;
        };
    };

    macros {
        arrow_right: arrow_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "ARROW_RIGHT";
        };

        right_arrow_wide: right_arrow_wide {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "RIGHT_ARROW_WIDE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESC       &kp N1  &kp N2  &kp N3        &kp N4            &kp N5                                                                    &kp N6            &kp N7                                &kp N8               &kp N9   &kp N0    &kp GRAVE
&kp TAB       &kp Q   &kp W   &kp E         &kp R             &kp T                                                                     &kp Y             &kp U                                 &kp I                &kp O    &kp P     &kp MINUS
&kp LEFT_GUI  &kp A   &kp S   &kp D         &kp F             &kp G                                                                     &kp H             &kp J                                 &kp K                &kp L    &kp SEMI  &kp SQT
&kp LEFT_ALT  &kp Z   &kp X   &kp C         &kp V             &kp B             &kp LBKT                      &kp RBKT                  &kp N             &kp M                                 &kp COMMA            &kp DOT  &kp FSLH  &key_repeat
                              &lt 2 ESCAPE  &shift_dedicated  &key_layer 4 TAB  &key_mod_thumb LCTRL SPACE    &key_layer_thumb 6 ENTER  &key_layer 5 TAB  &key_mod_shift RIGHT_SHIFT BACKSPACE  &key_layer 2 DELETE
            >;
        };

        focal {
            bindings = <
&kp ESC  &trans  &trans  &trans  &trans  &trans                    &trans     &trans  &trans     &trans   &trans    &tog 1
&trans   &kp V   &kp L   &kp H   &kp G   &kp K                     &kp Q      &kp F   &kp O      &kp U    &kp J     &kp PLUS
&trans   &kp S   &kp R   &kp N   &kp T   &kp B                     &kp Y      &kp C   &kp A      &kp E    &kp I     &kp MINUS
&trans   &kp Z   &kp X   &kp M   &kp D   &kp P   &trans    &trans  &kp SLASH  &kp W   &kp COMMA  &kp DOT  &kp SEMI  &trans
                         &trans  &trans  &trans  &trans    &trans  &trans     &trans  &trans
            >;
        };

        numpad {
            bindings = <
&trans  &trans          &trans        &trans        &trans        &trans                        &trans  &trans                  &trans                       &trans                     &trans                     &layer_fix 2 2
&trans  &kp PLUS        &kp N9        &kp N8        &kp NUMBER_4  &kp COMMA                     &trans  &trans                  &trans                       &trans                     &trans                     &trans
&trans  &kp MINUS       &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1  &kp N0                        &tog 3  &home_row_sticky LCTRL  &home_row_sticky LEFT_SHIFT  &home_row_sticky LEFT_ALT  &home_row_sticky LEFT_GUI  &trans
&trans  &kp UNDERSCORE  &kp N7        &kp NUMBER_6  &kp N5        &kp PERIOD  &trans    &trans  &trans  &mo 3                   &trans                       &trans                     &trans                     &trans
                                      &trans        &trans        &trans      &trans    &trans  &trans  &trans                  &trans
            >;
        };

        fpad {
            bindings = <
&trans  &trans   &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &layer_fix 3 3
&trans  &kp F11  &kp F9  &kp F8  &kp F4  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F10  &kp F3  &kp F2  &kp F1  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F12  &kp F7  &kp F6  &kp F5  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                         &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };

        sym_left {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&bt BT_NXT   &bt BT_SEL 0               &bt BT_SEL 1               &bt BT_SEL 2                 &bt BT_SEL 3            &bt BT_SEL 4                           &trans             &trans         &trans        &trans         &trans         &bt BT_CLR
&kp TILDE    &kp AT                     &kp LESS_THAN              &kp GREATER_THAN             &kp LEFT_BRACE          &kp RIGHT_BRACE                        &kp GRAVE          &kp RBRC       &kp EXCL      &trans         &trans         &kp TILDE
&kp DOLLAR   &home_row_sticky LEFT_GUI  &home_row_sticky LEFT_ALT  &home_row_sticky LEFT_SHIFT  &home_row_sticky LCTRL  &kp EXCLAMATION                        &kp DOUBLE_QUOTES  &kp EQUAL      &kp COLON     &kp UNDER      &kp PIPE       &kp CARET
&kp AT_SIGN  &kp HASH                   &kp SLASH                  &kp ASTERISK                 &kp DOT                 &kp COMMA        &kp LPAR    &kp RPAR  &kp SINGLE_QUOTE   &kp SEMICOLON  &kp QUESTION  &kp BACKSLASH  &kp BACKSLASH  &kp PERCENT
                                                                   &trans                       &trans                  &trans           &trans      &trans    &mo 7              &trans         &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        sym_right {
            bindings = <
&bt BT_NXT   &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2      &bt BT_SEL 3    &bt BT_SEL 4                                        &trans             &trans                  &trans                  &trans                     &trans                 &bt BT_CLR
&kp TILDE    &kp AT         &kp LESS_THAN  &kp GREATER_THAN  &kp LEFT_BRACE  &kp RIGHT_BRACE                                     &kp GRAVE          &kp RIGHT_BRACE         &kp EXCL                &trans                     &trans                 &kp TILDE
&kp DOLLAR   &kp AMPERSAND  &kp MINUS      &kp PLUS          &kp EQUAL       &kp EXCLAMATION                                     &kp DOUBLE_QUOTES  &home_row_sticky LCTRL  &home_row_sticky LSHFT  &home_row_sticky LEFT_ALT  &home_row_sticky LGUI  &kp CARET
&kp AT_SIGN  &kp HASH       &kp SLASH      &kp ASTERISK      &kp DOT         &kp COMMA        &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp SINGLE_QUOTE   &kp SEMICOLON           &kp QUESTION            &kp BACKSLASH              &kp BACKSLASH          &kp PERCENT
                                           &trans            &trans          &mo 7            &trans            &trans           &trans             &trans                  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        nav_right {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans           &trans          &trans          &trans        &trans           &trans                                  &to 1   &to 8                          &trans                       &trans                     &trans                     &layer_fix 6 6
&trans           &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END          &trans                                  &trans  &out OUT_TOG                   &out OUT_USB                 &out OUT_BLE               &trans                     &trans
&msc SCRL_LEFT   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &msc SCRL_UP                            &trans  &home_row_sticky LEFT_CONTROL  &home_row_sticky LEFT_SHIFT  &home_row_sticky LEFT_ALT  &home_row_sticky LEFT_GUI  &trans
&msc SCRL_RIGHT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &msc SCRL_DOWN  &mkp LCLK    &mkp RCLK  &trans  &mkp LCLK                      &mkp RCLK                    &trans                     &trans                     &trans
                                                 &trans        &trans           &mo 7           &trans       &trans     &trans  &trans                         &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        media {
            bindings = <
&trans                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3   &bt BT_SEL 4                    &to 1       &to 8          &trans            &trans                     &trans             &layer_fix 7 7
&kp C_BRIGHTNESS_DEC  &trans        &trans        &trans           &trans         &trans                          &trans      &trans         &trans            &trans                     &ext_power EP_TOG  &kp C_BRIGHTNESS_INC
&kp C_VOLUME_DOWN     &trans        &trans        &trans           &trans         &trans                          &kp C_MUTE  &kp C_PREV     &kp C_PLAY_PAUSE  &home_row_sticky LEFT_ALT  &kp C_NEXT         &kp C_VOLUME_UP
&trans                &trans        &trans        &kp PRINTSCREEN  &kp LG(LS(S))  &trans        &trans    &trans  &trans      &kp LG(SPACE)  &trans            &trans                     &trans             &trans
                                                  &trans           &caps_word     &trans        &trans    &trans  &trans      &trans         &trans
            >;
        };

        game {
            bindings = <
&kp ESC    &kp N1  &kp N2  &kp N3    &kp N4    &kp N5                             &kp N6     &kp N7    &kp N8     &kp N9   &kp N0    &tog 8
&kp TAB    &kp Q   &kp W   &kp E     &kp R     &kp T                              &kp Y      &kp U     &kp I      &kp O    &kp P     &kp BSPC
&kp LSHFT  &kp A   &kp S   &kp D     &kp F     &kp G                              &kp H      &kp J     &kp K      &kp L    &kp SEMI  &kp LSHFT
&kp GRAVE  &kp Z   &kp X   &kp C     &kp V     &kp B      &kp ENTER    &kp ENTER  &kp N      &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp APOS
                           &kp LALT  &kp LGUI  &kp LCTRL  &kp SPACE    &kp SPACE  &kp LCTRL  &kp LGUI  &kp LALT
            >;
        };
    };
};
