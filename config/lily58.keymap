/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        backspace_tap_dance: backspace_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "BACKSPACE_TAP_DANCE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp BACKSPACE>;

            tapping-term-ms = <150>;
        };

        copy_caps_word: copy_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "COPY_CAPS_WORD";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>, <&caps_word>;
        };

        shift_caps: shift_caps {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_CAPS";
            bindings = <&kp>, <&copy_caps_word>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
        };

        numpad_layer: numpad_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "NUMPAD_LAYER";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        home_row_sticky: home_row_sticky {
            compatible = "zmk,behavior-sticky-key";
            label = "HOME_ROW_STICKY";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <2000>;
            quick-release;
            ignore-modifiers;
        };

        delete_tap_dance: delete_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "DELETE_TAP_DANCE";
            #binding-cells = <0>;
            bindings = <&kp DELETE>, <&kp DELETE>;

            tapping-term-ms = <150>;
        };

        backspace_modified: backspace_modified {
            compatible = "zmk,behavior-hold-tap";
            label = "BACKSPACE_MODIFIED";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <125>;
        };

        delete_modified: delete_modified {
            compatible = "zmk,behavior-hold-tap";
            label = "DELETE_MODIFIED";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <125>;
        };
    };

    macros {
        arrow_right: arrow_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "ARROW_RIGHT";
        };

        right_arrow_wide: right_arrow_wide {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "RIGHT_ARROW_WIDE";
        };

        double_backspace: double_backspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE &kp BACKSPACE>;
            label = "DOUBLE_BACKSPACE";
        };

        double_delete: double_delete {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DELETE &kp DELETE>;
            label = "DOUBLE_DELETE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESC           &kp N1  &kp N2  &kp N3        &kp N4            &kp N5                                                  &kp N6     &kp N7                                    &kp N8                     &kp N9   &kp N0    &kp GRAVE
&kp TAB           &kp Q   &kp W   &kp E         &kp R             &kp T                                                   &kp Y      &kp U                                     &kp I                      &kp O    &kp P     &kp MINUS
&kp LEFT_GUI      &kp A   &kp S   &kp D         &kp F             &kp G                                                   &kp H      &kp J                                     &kp K                      &kp L    &kp SEMI  &kp SQT
&mt LEFT_ALT ESC  &kp Z   &kp X   &kp C         &kp V             &kp B        &kp LBKT                  &kp RBKT         &kp N      &kp M                                     &kp COMMA                  &kp DOT  &kp FSLH  &kp BACKSPACE
                                  &lt 4 ESCAPE  &mt LSHIFT LC(C)  &lt 1 LC(V)  &mt LEFT_CONTROL SPACE    &mt LCTRL ENTER  &lt 2 TAB  &backspace_modified LEFT_SHIFT BACKSPACE  &delete_modified 4 DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        left_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&bt BT_NXT   &bt BT_SEL 0   &bt BT_SEL 1    &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_SEL 4                            &ext_power EP_ON   &ext_power EP_OFF  &ext_power EP_TOG  &trans        &trans         &bt BT_CLR
&kp GRAVE    &kp NUMBER_1   &kp NUMBER_2    &kp NUMBER_3      &kp NUMBER_4  &kp N5                                  &kp NUMBER_6       &kp N7             &kp N8             &kp N9        &kp N0         &kp TILDE
&kp DOLLAR   &kp AMPERSAND  &kp UNDERSCORE  &kp EXCLAMATION   &kp PLUS      &kp ASTERISK                            &kp SLASH          &kp MINUS          &kp COLON          &kp EQUAL     &kp PIPE       &kp CARET
&kp AT_SIGN  &kp HASH       &kp LESS_THAN   &kp GREATER_THAN  &kp DOT       &kp SINGLE_QUOTE  &kp LPAR    &kp RPAR  &kp DOUBLE_QUOTES  &kp COMMA          &kp SEMI           &kp QUESTION  &kp BACKSLASH  &kp PERCENT
                                            &trans            &trans        &mo 1             &trans      &trans    &mo 3              &trans             &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        right_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&out OUT_TOG  &out OUT_USB        &out OUT_BLE        &trans            &trans               &trans                                               &trans             &trans         &trans           &trans    &trans     &trans
&kp F12       &kp F1              &kp F2              &kp F3            &kp F4               &kp F5                                               &kp F6             &kp F7         &kp F8           &kp F9    &kp F10    &kp F11
&kp F1        &kp LC(LEFT_ARROW)  &kp LC(DOWN_ARROW)  &kp LC(UP_ARROW)  &kp LC(RIGHT_ARROW)  &trans                                               &trans             &kp LEFT       &kp DOWN         &kp UP    &kp RIGHT  &trans
&kp F7        &kp F8              &kp BACKSLASH       &kp SLASH         &kp QUESTION         &kp SINGLE_QUOTE  &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp DOUBLE_QUOTES  &kp LG(SPACE)  &kp LA(TAB)      &kp LBKT  &kp RBKT   &kp BSLH
                                                      &trans            &trans               &mo 3             &mkp LCLK         &mkp RCLK        &mo 2              &kp LG(LS(S))  &kp PRINTSCREEN
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        layer_3 {
            bindings = <
&trans                &trans                     &trans                     &trans                       &trans                         &trans                              &trans       &trans                         &trans                       &trans                     &trans                     &trans
&kp C_BRIGHTNESS_DEC  &trans                     &trans                     &trans                       &trans                         &trans                              &trans       &kp HOME                       &kp PAGE_DOWN                &kp PAGE_UP                &kp END                    &kp C_BRIGHTNESS_INC
&kp C_VOLUME_DOWN     &home_row_sticky LEFT_GUI  &home_row_sticky LEFT_ALT  &home_row_sticky LEFT_SHIFT  &home_row_sticky LEFT_CONTROL  &kp C_PLAY_PAUSE                    &kp C_MUTE   &home_row_sticky LEFT_CONTROL  &home_row_sticky LEFT_SHIFT  &home_row_sticky LEFT_ALT  &home_row_sticky LEFT_GUI  &kp C_VOLUME_UP
&kp C_PREVIOUS        &trans                     &trans                     &caps_word                   &trans                         &kp TAB           &trans    &trans  &kp LS(TAB)  &kp LG(SPACE)                  &trans                       &trans                     &trans                     &kp C_NEXT
                                                                            &trans                       &caps_word                     &trans            &trans    &trans  &trans       &trans                         &trans
            >;
        };

        numpad {
            bindings = <
&trans        &trans     &trans        &trans        &trans          &trans                                        &trans     &trans                    &trans      &trans  &trans   &trans
&trans        &trans     &kp N9        &kp N8        &kp NUMBER_4    &trans                                        &trans     &kp F4                    &kp F8      &kp F9  &kp F11  &trans
&kp LEFT_WIN  &kp MINUS  &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1    &kp N0                                        &trans     &kp F1                    &kp F2      &kp F3  &kp F10  &trans
&kp LEFT_ALT  &trans     &kp N7        &kp NUMBER_6  &kp N5          &trans    &trans             &trans           &trans     &kp F5                    &kp F6      &kp F7  &kp F12  &tog 4
                                       &kp LCTRL     &kp LEFT_SHIFT  &kp LEFT  &mt LCTRL SPACE    &mt LCTRL ENTER  &kp RIGHT  &mt LEFT_SHIFT BACKSPACE  &kp DELETE
            >;
        };
    };
};
